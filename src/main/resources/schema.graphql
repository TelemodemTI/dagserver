type Channel {
	name: String,
	status: String,
	props: [ChannelProps]
}

type ChannelProps {
	key: String,
	value: String
	descr: String
}

type Deps {
	onStart: [String],
	onEnd: [String]
}

type Agent {
	id: Int,
	name: String,
	hostname: String,
	updatedOn: Float
}

type Property {
	group: String
	name: String
	description: String
	value: String
}

type Uncompiled {
	uncompiledId : Int
	bin: String
	createdDt: Float
}


type Node {
	index: Int,
	operations: [String]
}
type Detail {
	dagname: String,
	cronExpr: String,
	group: String,
	onStart: String,
	onEnd: String,
	node: [Node] 
}
type DetailStatus {
	status: String,
	detail: [Detail]
}


type StatusOp { 
	status: String , 
	code: Int , 
	value: String 
}

type Available {
	jarname: String
	classname: String
	groupname: String
	dagname: String
	cronExpr: String
	triggerEvent: String
	targetDagname: String
}

type Scheduled {
	dagname: String
	groupname: String
	eventTrigger: String
	nextFireAt: Float
}

type LogEntry {
	id: Int,
	dagname: String,
	execDt: String,
	value: String,
	outputxcom: String,
	marks: String,
	status: String,
	channel: String
}

type Account {
	id: Int,
    username: String,
    typeAccount: String
}


type Query { 
	login(username: String ,pwdhash: String) : String,
	getIcons(type:String) : String,
	scheduledJobs : [Scheduled] , 
	availableJobs: [Available], 
	logs(dagname: String): [LogEntry],
	last : [LogEntry],
	detail(jarname: String) : DetailStatus,
	properties: [Property],
	agents : [Agent],
	getUncompileds(token:String) : [Uncompiled],
	operatorsMetadata : String,
	credentials(token: String) : [Account],
	getDependencies(jarname: String, dagname: String) : Deps
	channelStatus(token: String) : [Channel]
	exportUncompiled(token: String,uncompiled:Int): String
}

type Mutation { 
	scheduleDag(token:String, dagname:String, jarname:String) : StatusOp, 
	unscheduleDag(token:String, dagname:String, jarname:String) : StatusOp,
	createProperty(token:String, name: String, description: String, value: String,group: String) : StatusOp,
	deleteProperty(token:String, name: String, group: String) : StatusOp,
	deleteGroupProperty(token:String, name: String, group: String) : StatusOp,
	executeDag(token:String, dagname:String, jarname:String) : StatusOp,
	saveUncompiled(token:String, bin:String) : StatusOp,
	updateUncompiled(token:String, uncompiled:Int , bin:String) : StatusOp,
	compile(token:String, uncompiled:Int, force: Int) : StatusOp,
	deleteUncompiled(token:String, uncompiled:Int) : StatusOp,
	createAccount(token:String,username:String,accountType:String, pwdHash:String) : StatusOp,
	deleteAccount(token:String,username:String) : StatusOp
	updateParamsCompiled(token:String, idope:String,typeope:String, jarname:String, bin:String) : StatusOp	
	updateProp(token:String,group:String,key:String,value:String) : StatusOp
	deleteJarfile(token:String, jarname:String) : StatusOp
	addGitHubWebhook(token:String,name:String,repository:String,secret:String,dagname:String, jarname:String) : StatusOp
	removeGithubWebhook(token:String,name:String) : StatusOp
	deleteLog(token:String,logid: Int) : StatusOp
	deleteAllLogs(token:String,dagname:String) : StatusOp
	renameUncompiled(token:String,uncompiled:Int,newname:String) : StatusOp
	saveRabbitChannel(token:String, host:String, user:String, pwd:String, port:Int) : StatusOp
	addQueue(token:String, queue:String,jarfile:String,dagname:String) : StatusOp
	delQueue(token:String, queue:String) : StatusOp
	saveRedisChannel(token:String,mode:String,hostnames:String portnumbers:String) : StatusOp
	addListener(token:String, channel:String,jarfile:String,dagname:String) : StatusOp
	delListener(token:String, channel:String) : StatusOp
}